# Specify the minimum version for CMake
cmake_minimum_required (VERSION 3.8)

if(${CMAKE_VERSION} VERSION_LESS 3.14)
	cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})
else()
	cmake_policy(VERSION 3.14)
endif()

# Project name
set(SPACE_INVADERS "SpaceInvaders")
set(SPACE_INVADERS_LIBRARIES "spaceinvaders-1.0")

# C++ version
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

project (
	${SPACE_INVADERS}
	VERSION 0.1
	LANGUAGES CXX C
)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

if (CMAKE_VERSION VERSION_LESS "3.7.0")
	set(CMAKE_INCLUDE_CURRENT_DIR ON)
endif()

# Build directories
set(SPACE_INVADERS_BINARY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/bin)
set(SPACE_INVADERS_EXECUTABLE_OUTPUT_PATH ${SPACE_INVADERS_BINARY_DIR})
set(SPACE_INVADERS_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${SPACE_INVADERS_BINARY_DIR})
set(SPACE_INVADERS_GAME_FOLDER ${CMAKE_CURRENT_SOURCE_DIR}/game)
set(SPACE_INVADERS_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fpic")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpic")

# configuration options
option(BUILD_EXECUTABLE "Build a executable." OFF)

# The following folder will be included
include_directories(${SPACE_INVADERS_SOURCE_DIR} ${SPACE_INVADERS_EXECUTABLE_OUTPUT_PATH})

# set platform variable
set(WINDOWS FALSE)
set(LINUX FALSE)
set(MACOSX FALSE)

if(WIN32 AND NOT UNIX)
	set(WINDOWS TRUE)
elseif(UNIX AND NOT WIN32 AND NOT APPLE)
	set(LINUX TRUE)
elseif(APPLE AND UNIX)
	set(MACOSX TRUE)
else()
	message(AUTHOR_WARNING "System is currently not supported explicitly. Assuming Linux.")
	set(LINUX TRUE)
endif()

if (LINUX)
	find_package(PkgConfig)
	if (NOT PKG_CONFIG_FOUND)
		message(FATAL_ERROR "The dependency \"pkg-config\" could not be resolved. Please make sure it is installed.")
	endif()

	#qt
	list(APPEND QT5_INCLUDE_DIRS "")
	list(APPEND QT5_LIBRARIES "")
	find_package(Qt5Widgets REQUIRED)
	find_package(Qt5Svg REQUIRED)
	find_package(Qt5OpenGL REQUIRED)

	pkg_search_module(QT5WIDGETS REQUIRED Qt5Widgets)
	pkg_search_module(QT5SVG REQUIRED Qt5Svg)
	pkg_search_module(QT5OPENGL REQUIRED Qt5OpenGL)

	list(APPEND QT5_INCLUDE_DIRS
		${QT5WIDGETS_INCLUDE_DIRS}
		${QT5SVG_INCLUDE_DIRS}
		${QT5OPENGL_INCLUDE_DIRS}
	)
	list(APPEND QT5_LIBRARIES
		${QT5WIDGETS_LIBRARIES}
		${QT5SVG_LIBRARIES}
		${QT5OPENGL_LIBRARIES}
	)
endif()

if (WINDOWS)
	#qt
	list(APPEND QT5_INCLUDE_DIRS "")
	list(APPEND QT5_LIBRARIES "")
	find_package(Qt5 COMPONENTS Core Widgets Svg OpenGl REQUIRED)
	if (Qt5_FOUND)
		list(APPEND QT5_INCLUDE_DIRS
			${Qt5Widgets_INCLUDE_DIRS}
			${Qt5Svg_INCLUDE_DIRS}
			${Qt5OpenGl_INCLUDE_DIRS}
		)
		list(APPEND QT5_LIBRARIES
			${Qt5Widgets_LIBRARIES}
			${Qt5Svg_LIBRARIES}
			${Qt5OpenGl_LIBRARIES}
		)
	endif()
endif()

#boost
find_package(Boost REQUIRED COMPONENTS date_time filesystem system)
find_package(Threads REQUIRED)

set(Boost_USE_MULTITHREADED ON)

file(GLOB SPACE_INVADERS_SOURCES
	${SPACE_INVADERS_SOURCE_DIR}/*.cpp
	${SPACE_INVADERS_SOURCE_DIR}/**/*.cpp
	${SPACE_INVADERS_SOURCE_DIR}/**/**/*.cpp
	${SPACE_INVADERS_SOURCE_DIR}/**/**/**/*.cpp
)

file(GLOB SPACE_INVADERS_HEADERS
	${SPACE_INVADERS_INCLUDE_DIR}/*.hpp
	${SPACE_INVADERS_INCLUDE_DIR}/**/*.hpp
	${SPACE_INVADERS_INCLUDE_DIR}/**/**/*.hpp
	${SPACE_INVADERS_INCLUDE_DIR}/**/**/**/*.hpp
)

QT5_ADD_RESOURCES(SPACE_INVADERS_RESOURCES ${CMAKE_CURRENT_SOURCE_DIR}/spaceinvaders_resources.qrc)

add_library(${SPACE_INVADERS_LIBRARIES} STATIC
	${SPACE_INVADERS_SOURCES}
	${SPACE_INVADERS_RESOURCES}
)

target_include_directories(${SPACE_INVADERS_LIBRARIES} PUBLIC
	${SPACE_INVADERS_INCLUDE_DIR}
	${QT5_INCLUDE_DIRS}
	${Boost_INCLUDE_DIR}
)

target_link_libraries(${SPACE_INVADERS_LIBRARIES} PUBLIC
	${QT5_LIBRARIES}
	${Boost_LIBRARIES}
)


add_executable(${SPACE_INVADERS}
		${SPACE_INVADERS_SOURCE_DIR}/main.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/spaceinvaders_resources.qrc
)

set_property(TARGET ${SPACE_INVADERS} PROPERTY POSITION_INDEPENDENT_CODE ON)
target_compile_options(${SPACE_INVADERS} PRIVATE -fPIC)
add_compile_options(-fPIC)

target_include_directories(${SPACE_INVADERS} PUBLIC
	${SPACE_INVADERS_INCLUDE_DIR}
	${QT5_INCLUDE_DIRS}
	${Boost_INCLUDE_DIR}
)

target_link_libraries(${SPACE_INVADERS} PUBLIC
	${SPACE_INVADERS_LIBRARIES}
	${QT5_LIBRARIES}
	${Boost_LIBRARIES}
	${CMAKE_THREAD_LIBS_INIT}
)

set_property(
	TARGET ${SPACE_INVADERS_LIBRARIES}
	PROPERTY spaceinvaders_LIBRARIES ${SPACE_INVADERS_LIBRARIES}
)
set_property(
	TARGET ${SPACE_INVADERS_LIBRARIES}
	PROPERTY spaceinvaders_INCLUDE_DIRS ${SPACE_INVADERS_INCLUDE_DIR}
)